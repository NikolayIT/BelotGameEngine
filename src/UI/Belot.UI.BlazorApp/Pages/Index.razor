@page "/"
@using Belot.Engine
@using Belot.Engine.Cards
@using Belot.Engine.Players
@using Belot.AI.SmartPlayer
@using Belot.AI.DummyPlayer
@using Belot.Engine.Game
@using System.Threading
@using Timer = System.Timers.Timer

<h1>
    <span class="float-left">Blazor Belot 1.0</span>
    <span class="float-right">Result 0-0</span>
</h1>
<div class="clearfix"></div>

<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>
<div class="row" style="height: 100%">
    <div class="col-3 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-6 text-center">
        @*Play field*@
        <button class="btn btn-secondary" @onclick="ButtonClick">State has changed</button>
    </div>
    <div class="col-3 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
</div>
<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>

@code
{
    UiPlayerImplementation uiPlayer;
    BelotGame game;
    int cardsPerPlayer = 0;

    protected override void OnInitialized()
    {
        this.uiPlayer = new UiPlayerImplementation();
        uiPlayer.MyCardsChanged += (sender, collection) =>
        {
            cardsPerPlayer = collection.Count;
            this.StateHasChanged();
        };
        this.game = new BelotGame(uiPlayer, new SmartPlayer(), new SmartPlayer(), new SmartPlayer());
        Task.Run(() => game.PlayGame());
    }

    private void ButtonClick()
    {
        this.uiPlayer.Loop = false;
    }

    public class UiPlayerImplementation : IPlayer
    {
        public event EventHandler<CardCollection> MyCardsChanged;

        public bool Loop { get; set; } = true;

        public BidType GetBid(PlayerGetBidContext context)
        {
            Console.WriteLine("GetBid");
            this.MyCardsChanged?.Invoke(this, context.MyCards);
            return BidType.Pass;
        }

        public IEnumerable<Announce> GetAnnounces(PlayerGetAnnouncesContext context)
        {
            Console.WriteLine("GetAnnounces");
            this.MyCardsChanged?.Invoke(this, context.MyCards);
            return context.AvailableAnnounces;
        }

        public PlayCardAction PlayCard(PlayerPlayCardContext context)
        {
            Console.WriteLine("PlayCard");
            this.MyCardsChanged?.Invoke(this, context.MyCards);
            while (this.Loop)
            {
                Task.Delay(100).GetAwaiter().GetResult();
            }

            return new PlayCardAction(context.AvailableCardsToPlay.RandomElement(), true);
        }
    }
}
