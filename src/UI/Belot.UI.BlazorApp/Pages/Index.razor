@page "/"
@implements IPlayer
@inject IJSRuntime JSRuntime
@using Belot.Engine
@using Belot.Engine.Cards
@using Belot.Engine.Players
@using Belot.AI.SmartPlayer
@using Belot.AI.DummyPlayer
@using Belot.Engine.Game
@using System.Threading

<h1>
    <span class="float-left">Blazor Belot 1.0</span>
    <span class="float-right">Result 0-0</span>
</h1>
<div class="clearfix"></div>

<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>
<div class="row" style="height: 100%">
    <div class="col-3 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-6 text-center">
        @*Play field*@
        <button class="btn btn-secondary" @onclick="ButtonClick">State has changed</button>
    </div>
    <div class="col-3 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
</div>
<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @for (var i = 0; i < cardsPerPlayer; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>
@code
{
    BelotGame game;
    int cardsPerPlayer = 0;

    bool clicked = false;

    protected override void OnInitialized()
    {
        this.game = new BelotGame(this, new SmartPlayer(), new SmartPlayer(), new SmartPlayer());
        Task.Run(() => game.PlayGame());
    }

    private void ButtonClick()
    {
        this.clicked = true;
    }

    public BidType GetBid(PlayerGetBidContext context)
    {
        Console.WriteLine("GetBid");
        Thread.Sleep(100);
        UpdateUi(context);
        return BidType.Pass;
    }

    public IEnumerable<Announce> GetAnnounces(PlayerGetAnnouncesContext context)
    {
        Console.WriteLine("GetAnnounces");
        UpdateUi(context);
        return context.AvailableAnnounces;
    }

    public PlayCardAction PlayCard(PlayerPlayCardContext context)
    {
        Console.WriteLine("PlayCard");
        UpdateUi(context);
        return new PlayCardAction(context.AvailableCardsToPlay.RandomElement(), true);
    }

    private void UpdateUi(BasePlayerContext context)
    {
        this.cardsPerPlayer = context.MyCards.Count;
        this.StateHasChanged();
    }
}
