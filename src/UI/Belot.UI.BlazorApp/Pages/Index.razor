@page "/"
@using Belot.Engine
@using Belot.Engine.Cards
@using Belot.Engine.Players
@using Belot.AI.SmartPlayer
@using Belot.AI.DummyPlayer

<h1 class="text-center">Blazor Belot 1.0</h1>

<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @for (int i = 0; i < 8; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>
<div class="row">
    <div class="col-3 text-center">
        @for (int i = 0; i < 8; i++)
        {
            <CardImage></CardImage>
        }
    </div>
    <div class="col-6 text-center">
        Play field
    </div>
    <div class="col-3 text-center">
        @for (int i = 0; i < 8; i++)
        {
            <CardImage></CardImage>
        }
    </div>
</div>
<div class="row">
    <div class="col-3 text-center">
    </div>
    <div class="col-6 text-center">
        @foreach (var card in Enumerable.Range(0, 8).Select(x => deck.GetNextCard()))
        {
            <CardImage Card="card"></CardImage>
        }
    </div>
    <div class="col-3 text-center">
    </div>
</div>

<button class="btn btn-primary" @onclick="() => RunGames(100)">Simulate 100 games (smart vs random)</button>

<div>@simulationResult</div>

@code
{
    Deck deck = new Deck();
    string simulationResult;

    protected override void OnInitialized()
    {
        deck.Shuffle();
    }

    void RunGames(int count)
    {
        var game = new BelotGame(new SmartPlayer(), new RandomPlayer(), new SmartPlayer(), new RandomPlayer());
        var southNorthWins = 0;
        var eastWestWins = 0;
        for (var i = 0; i < count; i++)
        {
            var firstToPlay = (PlayerPosition)(1 << (i % 4));
            var result = game.PlayGame(firstToPlay);
            if (result.Winner == PlayerPosition.SouthNorthTeam)
            {
                southNorthWins++;
            }
            else
            {
                eastWestWins++;
            }
        }

        simulationResult = $"Result: {southNorthWins}-{eastWestWins} (Total: {southNorthWins + eastWestWins} games)";
    }
}
